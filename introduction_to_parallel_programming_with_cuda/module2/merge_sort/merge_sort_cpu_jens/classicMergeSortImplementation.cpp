/**
 * This is a more efficient implementation of the merge sort algorithm that
 * was generated by google gemini. It helped me to get a less memory extensive 
 * implementation of merge sort, which is a more classical way to do it. In order
 * to get a first grip on the merge sort implementation is the "mainJensMergeSortV1.cpp" a
 * good example but if you want a more staight forward and efficient one, this is the
 * way to go
 */

 #include <iostream>
#include <vector>
#include <algorithm> // std::copy

void merge(std::vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // generate a local copy to operate on (L[i] <= R[j])
    std::vector<int> L(n1);
    std::vector<int> R(n2);
    std::copy(arr.begin() + left, arr.begin() + mid + 1, L.begin());
    std::copy(arr.begin() + mid + 1, arr.begin() + right + 1, R.begin());

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++]; // sort the sub arrays in the correct order in the initial arr
        } else {
            arr[k++] = R[j++]; // sort the sub arrays in the correct order in the initial arr
        }
    }

    // add the rest of the remaining sub array if one is already fully readded to the arr
    while (i < n1) {
        arr[k++] = L[i++]; // sort the sub arrays in the correct order in the initial arr
    }

    while (j < n2) {
        arr[k++] = R[j++]; // sort the sub arrays in the correct order in the initial arr
    }
    // end of the recursive sub-sort call
}

void mergeSort(std::vector<int>& arr, int left, int right) { // handover the array that we want to sort by reference to avoid unneeded copies
    // divide recursively until we have only one element left where the merge step will be executed
    if (left < right) {
        int mid = left + (right - left) / 2; // for every recursive call, the left, right and mid indices hold a partially sorted sub-array (defined by index) which is gone back by the recursive resolution
        mergeSort(arr, left, mid); // half the problem
        mergeSort(arr, mid + 1, right); // half the problem
        
        // after the if statement is stopped by have just one element left, we merge for the first time
        merge(arr, left, mid, right);
    }
}

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};

    mergeSort(data, 0, data.size() - 1);

    std::cout << "Sorted array via merge sort is: ";
    for (int val : data) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    return 0;
}